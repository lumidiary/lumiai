name: Deploy to Kubernetes

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write  # OIDC 토큰 생성을 위해 필요

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'  # Maven 의존성 캐시

      - name: Build with Maven
        run: mvn --batch-mode clean package -DskipTests

      - name: Run Tests
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GOOGLE_MAPS_API_KEY: ${{ secrets.GOOGLE_MAPS_API_KEY }}
          OCI_USER_OCID: ${{ secrets.OCI_USER_OCID }}
          OCI_TENANCY_OCID: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_API_KEY_FINGERPRINT: ${{ secrets.OCI_API_KEY_FINGERPRINT }}
          OCI_PRIVATE_KEY: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_REGION: ${{ secrets.OCI_REGION }}
          OCI_QUEUE_ENDPOINT: ${{ secrets.OCI_QUEUE_ENDPOINT }}
          OCI_QUEUE_OCID: ${{ secrets.OCI_QUEUE_OCID }}
          OCI_QUEUE_DIARY_CHANNEL_VALUE: ${{ secrets.OCI_QUEUE_DIARY_CHANNEL_VALUE }}
          OCI_QUEUE_DIARY_CALLBACK_URL: ${{ secrets.OCI_QUEUE_DIARY_CALLBACK_URL }}
          OCI_QUEUE_DIGEST_CHANNEL_VALUE: ${{ secrets.OCI_QUEUE_DIGEST_CHANNEL_VALUE }}
          OCI_QUEUE_DIGEST_CALLBACK_URL: ${{ secrets.OCI_QUEUE_DIGEST_CALLBACK_URL }}
          OCI_QUEUE_POLLING_DELAY: ${{ secrets.OCI_QUEUE_POLLING_DELAY }}
          OCI_QUEUE_POLLING_INITIAL_DELAY: ${{ secrets.OCI_QUEUE_POLLING_INITIAL_DELAY }}
        run: mvn test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to OCI Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.OCIR_REGISTRY }}
          username: ${{ secrets.OCIR_USERNAME }}
          password: ${{ secrets.OCIR_TOKEN }}

      - name: Generate Image Tag
        id: image-tag
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          IMAGE_TAG="${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAME }}:${SHORT_SHA}"
          echo "tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.image-tag.outputs.tag }}
            ${{ secrets.OCIR_REGISTRY }}/${{ secrets.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Install OCI CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          sudo pip3 install oci-cli
          echo "/usr/local/bin" >> $GITHUB_PATH

      - name: Prepare kubeconfig directory
        run: |
          mkdir -p $HOME/.kube
          touch $HOME/.kube/config

      - name: Configure kubectl for OKE
        uses: oracle-actions/configure-kubectl-oke@v1.5.0
        env:
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_API_KEY_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_REGION }}
        with:
          cluster: ${{ secrets.OKE_CLUSTER_OCID }}

      - name: Verify Cluster Connection
        env:
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_API_KEY_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          kubectl cluster-info
          kubectl get nodes

      - name: Create Docker Registry Secret for OCI
        env:
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_API_KEY_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          kubectl delete secret ocir-secret --ignore-not-found
          kubectl create secret docker-registry ocir-secret \
            --docker-server=${{ secrets.OCIR_REGISTRY }} \
            --docker-username=${{ secrets.OCIR_USERNAME }} \
            --docker-password='${{ secrets.OCIR_TOKEN }}' \

      - name: Update Kubernetes Secrets
        env:
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_API_KEY_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          kubectl delete secret lumiai-env --ignore-not-found
          kubectl create secret generic lumiai-env \
            --from-literal=GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" \
            --from-literal=GOOGLE_MAPS_API_KEY="${{ secrets.GOOGLE_MAPS_API_KEY }}" \
            --from-literal=OCI_USER_OCID="${{ secrets.OCI_USER_OCID }}" \
            --from-literal=OCI_TENANCY_OCID="${{ secrets.OCI_TENANCY_OCID }}" \
            --from-literal=OCI_API_KEY_FINGERPRINT="${{ secrets.OCI_API_KEY_FINGERPRINT }}" \
            --from-literal=OCI_PRIVATE_KEY="${{ secrets.OCI_PRIVATE_KEY }}" \
            --from-literal=OCI_REGION="${{ secrets.OCI_REGION }}" \
            --from-literal=OCI_QUEUE_ENDPOINT="${{ secrets.OCI_QUEUE_ENDPOINT }}" \
            --from-literal=OCI_QUEUE_OCID="${{ secrets.OCI_QUEUE_OCID }}" \
            --from-literal=OCI_QUEUE_DIARY_CHANNEL_VALUE="${{ secrets.OCI_QUEUE_DIARY_CHANNEL_VALUE }}" \
            --from-literal=OCI_QUEUE_DIARY_CALLBACK_URL="${{ secrets.OCI_QUEUE_DIARY_CALLBACK_URL }}" \
            --from-literal=OCI_QUEUE_DIGEST_CHANNEL_VALUE="${{ secrets.OCI_QUEUE_DIGEST_CHANNEL_VALUE }}" \
            --from-literal=OCI_QUEUE_DIGEST_CALLBACK_URL="${{ secrets.OCI_QUEUE_DIGEST_CALLBACK_URL }}" \
            --from-literal=OCI_QUEUE_POLLING_DELAY="${{ secrets.OCI_QUEUE_POLLING_DELAY }}" \
            --from-literal=OCI_QUEUE_POLLING_INITIAL_DELAY="${{ secrets.OCI_QUEUE_POLLING_INITIAL_DELAY }}"

      - name: Update Deployment Image
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|${{ steps.image-tag.outputs.tag }}|g" k8s/deployment.yaml

      - name: Deploy to Kubernetes
        env:
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_API_KEY_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          kubectl apply -f k8s/

      - name: Wait for Deployment Rollout
        env:
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_API_KEY_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          kubectl rollout status deployment/ai-service --timeout=300s

      - name: Verify Deployment
        env:
          OCI_CLI_USER: ${{ secrets.OCI_USER_OCID }}
          OCI_CLI_TENANCY: ${{ secrets.OCI_TENANCY_OCID }}
          OCI_CLI_FINGERPRINT: ${{ secrets.OCI_API_KEY_FINGERPRINT }}
          OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_PRIVATE_KEY }}
          OCI_CLI_REGION: ${{ secrets.OCI_REGION }}
        run: |
          kubectl get pods -l app=ai-service
          kubectl get services
